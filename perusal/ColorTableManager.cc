#include <iostream>
#include <stdint.h>
#include <stdio.h>
#include <string.h>

#include <se_utils.hh>
#include <sii_utils.hh>
#include <solo2.hh>

#include "ColorTableManager.hh"

// Global variables

ColorTableManager *ColorTableManager::_instance = (ColorTableManager *)0;


/*********************************************************************
 * Constructor
 */

ColorTableManager::ColorTableManager() :
  _asciiColorTables(0),
  _colorTableNamesList(0)
{
  // Create the color tables

  _initDefaultTables();

  // Set the singleton instance pointer

  _instance = this;
}


/*********************************************************************
 * Destructor
 */

ColorTableManager::~ColorTableManager()
{
}


/*********************************************************************
 * Inst()
 */

ColorTableManager *ColorTableManager::getInstance()
{
  if (_instance == 0)
    new ColorTableManager();
  
  return _instance;
}


/*********************************************************************
 * absorbTable()
 */

std::string ColorTableManager::absorbTable(const gchar *filename)
{
  // Open the file

  FILE *stream;
  if ((stream = fopen(filename, "r")) == 0)
  {
    char mess[256];
    
    sprintf(mess, "Unable to open color table file %s\n", filename);
    sii_message(mess);
    return "";
  }

  // Get the size of the file
  // NOTE:  Replace with stat to get file size

  size_t lenx = fseek(stream, 0L, SEEK_END); /* at end of file */
  size_t len0 = ftell(stream);	/* how big is the file */
  rewind(stream);

  // Extract the file name from the path

  const char *table_name;
  if ((table_name = strrchr(filename, '/')) != 0)
    table_name++;
  else
    table_name = filename;

  std::string table_buffer = "";
  
  table_buffer += std::string("colortable ") + table_name + "\n";

  // Read the file into a local buffer.
  // NOTE:  Check for errors on read???

  char *buf = (char *)malloc(len0 + 1);
  if (buf == 0)
    return "";
  lenx = fread(buf, sizeof(char), len0, stream);

  // Separate the buffer into lines

  std::vector< std::string > lines;
  tokenize(buf, lines, "\n");
        
  for (size_t jj = 0; jj < lines.size(); jj++)
  {
    std::string line = lines[jj];
    
    // Anything after a "!" is a comment

    std::size_t comment_pos = line.find("!");
    if (comment_pos != std::string::npos)
      line = line.substr(0, comment_pos);
    
    // If the line is too short, skip it

    if (line.size() < 2)
      continue;

    if (line.find("colortable") != std::string::npos)
      continue;
    
    table_buffer += line + "\n";
  }

  free(buf);

  // Remove the final CR from the table buffer

  table_buffer = table_buffer.substr(0, table_buffer.size() - 1);
  putAsciiColorTable(table_name, table_buffer.c_str());

  return table_name;
}


/*********************************************************************
 * dumpTables()
 */

bool ColorTableManager::dumpTables(FILE *stream) const
{
  struct gen_dsc {
    char name_struct[4];
    int32_t sizeof_struct;
  };
  
  struct gen_dsc gd;
  strncpy (gd.name_struct, "SCTB", 4);

  for(GSList *gsl = _colorTableNamesList; gsl; gsl = gsl->next)
  {
    gchar *aa = (gchar *)gsl->data;
    gchar *bb = getAsciiTable(aa);
    size_t len = strlen(bb);
    gd.sizeof_struct = 8 + len;

    size_t nn;
    
    if ((nn = fwrite(&gd, sizeof(char), sizeof(gd), stream)) < sizeof(gd))
    {
      gchar mess[256];
      sprintf(mess, "Problem writing color table: %s\n", aa);
      solo_message(mess);
      return false;
    }

    if ((nn = fwrite((void *)bb, sizeof(char), len, stream)) < len)
    {
      gchar mess[256];
      sprintf(mess, "Problem writing color table: %s\n", aa);
      solo_message(mess);
      return false;
    }
    
  }

  return true;
}


/*********************************************************************
 * putAsciiColorTable()
 */

void ColorTableManager::putAsciiColorTable(const gchar *name,
					   const gchar *table)
{
  // Allocate space for the color table name (key) and contents (value), and 
  // copy the incoming parameters since we need to make sure these don't 
  // disappear.
  gchar *key = (gchar *)g_malloc0(strlen(name) + 1);
  strcpy(key, name);
  
  gchar *value = (gchar *)g_malloc0(strlen(table) + 1);
  strcpy(value, table);

  if ((gchar * )g_tree_lookup(_asciiColorTables, (gpointer)key) == 0)
  {
    _colorTableNamesList =
      g_slist_insert_sorted(_colorTableNamesList, key, (GCompareFunc)strcmp);
  }

  g_tree_insert(_asciiColorTables, (gpointer)key, (gpointer)value);

  // NOTE: This statement has no effect since nn isn't used anywhere.

//  int nn = g_tree_nnodes(_asciiColorTables);

  _colorTableNames.push_back(key);
  sort(_colorTableNames.begin(), _colorTableNames.end());
}


/**********************************************************************
 *              Private Member Functions                              *
 **********************************************************************/

/*********************************************************************
 * _addTable()
 */

void ColorTableManager::_addTable(const char **at, int nn)
{
  // The name should be the second token

  std::vector< std::string > tokens;
  tokenize(at[0], tokens);

  GString *gen_gs = g_string_new("");
  sii_glom_strings(at, nn, gen_gs);
  
  char *buf = (char *)g_malloc0(gen_gs->len + 1);
  strncpy(buf, gen_gs->str, gen_gs->len);
  buf[gen_gs->len] = '\0';
  putAsciiColorTable(tokens[1].c_str(), buf);
}


/*********************************************************************
 * _initDefaultTables()
 */

void ColorTableManager::_initDefaultTables()
{
  _asciiColorTables = g_tree_new((GCompareFunc)strcmp);
  
  int nn;
  
  // carbone17

  const gchar * carbone17[] = {
    "colortable carbone17",
    "	0.539	0.066	0.559",
    "	0.293	0.121	0.621",
    "	0.461	0.363	0.887",
    "	0.437	0.684	0.809",
    "	0.066	0.543	0.066",
    "	0.125	0.652	0.125",
    "	0.430	0.770	0.430",
    "	0.633	0.816	0.633",
    "	0.906	0.902	0.906",
    "	0.984	0.859	0.050",
    "	0.984	0.750	0.113",
    "	0.879	0.641	0.211",
    "	0.750	0.535	0.289",
    "	0.629	0.441	0.344",
    "	0.871	0.375	0.469",
    "	0.945	0.277	0.418",
    "	0.809	0.156	0.254",
    "endtable",
  };

  nn = sizeof(carbone17)/sizeof(char *);
  _addTable(carbone17, nn);

  // carbone11

  const gchar * carbone11[] = {
    "colortable carbone11",
    "        0.539   0.066   0.559",
    "        0.465   0.363   0.891",
    "        0.434   0.687   0.812",
    "        0.125   0.652   0.125",
    "        0.637   0.816   0.637",
    "        0.906   0.906   0.906",
    "        0.965   0.863   0.051",
    "        0.945   0.691   0.238",
    "        0.633   0.441   0.348",
    "        0.891   0.441   0.531",
    "        0.793   0.129   0.238",
    "endtable",
  };

  nn = sizeof(carbone11)/sizeof(char *);
  _addTable(carbone11, nn);
  
  // rrate11

  const gchar * rrate11[] = {
    "colortable rrate11",
    "        0.504   0.000   0.504",
    "        0.301   0.176   0.629",
    "        0.426   0.363   0.937",
    "        0.039   0.523   0.031",
    "        0.367   0.746   0.348",
    "        0.945   0.937   0.922",
    "        0.996   0.855   0.035",
    "        0.937   0.609   0.156",
    "        0.590   0.391   0.309",
    "        0.934   0.387   0.434",
    "        0.832   0.066   0.238",
    "endtable",
  };

  nn = sizeof(rrate11)/sizeof(char *);
  _addTable(rrate11, nn);
  
  // bluebrown10

  const gchar * bluebrown10[] = {
    "colortable bluebrown10",
    "	0.004	0.379	0.754",
    "	0.005	0.517	0.815",
    "	0.006	0.654	0.877",
    "	0.007	0.792	0.938",
    "	0.008	0.930	1.000",
    "	1.000	0.902	0.695",
    "	0.902	0.764	0.606",
    "	0.805	0.625	0.517",
    "	0.707	0.487	0.429",
    "	0.609	0.348	0.340",
    "endtable",
  };

  nn = sizeof(bluebrown10)/sizeof(char *);
  _addTable(bluebrown10, nn);

  // bluebrown11

  const gchar * bluebrown11[] = {
    "colortable bluebrown11",
    "	0.004	0.379	0.754",
    "	0.005	0.517	0.815",
    "	0.006	0.654	0.877",
    "	0.007	0.792	0.938",
    "	0.008	0.930	1.000",
    "	0.906	0.902	0.906",
    "	1.000	0.902	0.695",
    "	0.902	0.764	0.606",
    "	0.805	0.625	0.517",
    "	0.707	0.487	0.429",
    "	0.609	0.348	0.340",
    "endtable",
  };

  nn = sizeof(bluebrown11)/sizeof(char *);
  _addTable(bluebrown11, nn);

  // theodore16

  const gchar * theodore16[] = {
    "colortable theodore16",
    "	0.676	0.676	0.996",
    "	0.559	0.559	0.996",
    "	0.453	0.453	0.828",
    "	0.309	0.312	0.672",
    "	0.133	0.570	0.000",
    "	0.367	0.707	0.367",
    "	0.594	0.801	0.594",
    "	0.824	0.895	0.824",
    "	0.938	0.891	0.586",
    "	0.938	0.797	0.004",
    "	0.938	0.703	0.066",
    "	0.758	0.531	0.180",
    "	0.645	0.117	0.117",
    "	0.742	0.355	0.352",
    "	0.863	0.250	0.250",
    "	0.973	0.293	0.469",
    "endtable",
  };

  nn = sizeof(theodore16)/sizeof(char *);
  _addTable(theodore16, nn);

  // ewilson17

  const gchar * ewilson17[] = {
    "colortable ewilson17",
    "	0.938	0.000	0.977",
    "	0.684	0.391	0.977",
    "	0.000	0.992	0.938",
    "	0.000	0.625	0.977",
    "	0.000	0.000	0.898",
    "	0.000	0.977	0.000",
    "	0.312	0.742	0.312",
    "	0.000	0.539	0.000",
    "	0.938	0.938	0.938",
    "	0.703	0.488	0.273",
    "	0.742	0.625	0.469",
    "	0.977	0.488	0.000",
    "	0.977	0.645	0.000",
    "	0.938	0.820	0.000",
    "	0.996	0.684	0.684",
    "	0.977	0.469	0.469",
    "	0.996	0.000	0.000",
    "endtable",
  };

  nn = sizeof(ewilson17)/sizeof(char *);
  _addTable(ewilson17, nn);

  // wild25

  const gchar * wild25[] = {
    "colortable wild25",
    "	254/256.0 4/256.0   255/256.0",
    "	217/256.0 4/256.0   255/256.0",
    "	180/256.0 4/256.0   255/256.0",
    "	146/256.0 4/256.0   255/256.0",
    "	99/256.0 4/256.0   255/256.0",
    "	4/256.0 4/256.0	  255/256.0",
    "	4/256.0	 128/256.0   255/256.0",
    "	4/256.0	 193/256.0   255/256.0",
    "	4/256.0	  252/256.0 17/256.0",
    "	4/256.0	  169/256.0 17/256.0",
    "	4/256.0	  132/256.0 17/256.0",
    "	4/256.0	  83/256.0  17/256.0",
    "	200/256.0 200/256.0 200/256.0",
    "	167/256.0 72/256.0 3/256.0",
    "	217/256.0 149/256.0 96/256.0",
    "	255/256.0 184/256.0 31/256.0",
    "	255/256.0 255/256.0 3/256.0",
    "	254/256.0 190/256.0 190/256.0",
    "	254/256.0 136/256.0 136/256.0",
    "	254/256.0 87/256.0  87/256.0",
    "	254/256.0 119/256.0  0/256.0",
    "	223/256.0 80/256.0  0/256.0",
    "	138/256.0 0/256.0   0/256.0",
    "	210/256.0 0/256.0   0/256.0",
    "	255/256.0 0/256.0   0/256.0",
    "endtable",
  };

  nn = sizeof(wild25)/sizeof(char *);
  _addTable(wild25, nn);

  // scook18

  const gchar * scook18[] = {
    "colortable scook18",
    "	0.762	0.074	0.915",
    "	0.578	0.215	0.914",
    "	0.328	0.363	0.887",
    "	0.086	0.523	0.855",
    "	0.008	0.715	0.692",
    "	0.008	0.883	0.425",
    "	0.004	0.782	0.058",
    "	0.008	0.668	0.012",
    "	0.387	0.586	0.387",
    "	0.703	0.582	0.453",
    "	0.754	0.543	0.312",
    "	0.859	0.559	0.192",
    "	0.953	0.590	0.070",
    "	0.973	0.676	0.059",
    "	0.899	0.516	0.223",
    "	0.972	0.492	0.344",
    "	0.996	0.074	0.074",
    "	0.855	0.078	0.078",
    "endtable",
  };

  nn = sizeof(scook18)/sizeof(char *);
  _addTable(scook18, nn);

  // pd17

  const gchar * pd17[] = {
    "colortable pd17",
    "	0.817	0.813	0.715",
    "	1.000	0.848	0.610",
    "	1.000	0.590	0.000",
    "	0.805	0.469	0.043",
    "	1.000	0.187	0.187",
    "	0.984	0.984	0.184",
    "	0.145	0.981	0.148",
    "	0.105	0.778	0.031",
    "	0.000	0.574	0.000",
    "	0.305	0.875	1.000",
    "	0.387	0.582	0.941",
    "	0.375	0.332	0.754",
    "	1.000	0.793	1.000",
    "	0.969	0.606	0.715",
    "	0.973	0.973	0.973",
    "	0.629	0.629	0.504",
    "	0.770	0.117	0.648",
    "endtable",
  };

  nn = sizeof(pd17)/sizeof(char *);
  _addTable(pd17, nn);

  // gray5

  const gchar * gray5[] = {
    "colortable gray5",
    "	0.426	0.426	0.426",
    "	0.535	0.535	0.535",
    "	0.660	0.660	0.660",
    "	0.816	0.816	0.816",
    "	0.941	0.941	0.941",
    "endtable",
  };

  nn = sizeof(gray5)/sizeof(char *);
  _addTable(gray5, nn);

  // gray9

  const gchar * gray9[] = {
    "colortable gray9",
    "	0.379	0.379	0.379",
    "	0.454	0.454	0.454",
    "	0.528	0.528	0.528",
    "	0.603	0.603	0.603",
    "	0.678	0.678	0.678",
    "	0.753	0.753	0.753",
    "	0.827	0.827	0.827",
    "	0.902	0.902	0.902",
    "	0.977	0.977	0.977",
    "endtable",
  };

  nn = sizeof(gray9)/sizeof(char *);
  _addTable(gray9, nn);

  // sym_gray12

  const gchar * sym_gray12[] = {
    "colortable sym_gray12",
    "	0.753	0.753	0.753",
    "	0.800	0.800	0.800",
    "	0.846	0.846	0.846",
    "	0.892	0.892	0.892",
    "	0.938	0.938	0.938",
    "	0.985	0.985	0.985",
    "	0.691	0.691	0.691",
    "	0.636	0.636	0.636",
    "	0.580	0.580	0.580",
    "	0.525	0.525	0.525",
    "	0.470	0.470	0.470",
    "	0.415	0.415	0.415",
    "endtable",
  };

  nn = sizeof(sym_gray12)/sizeof(char *);
  _addTable(sym_gray12, nn);

  // carbone42

  const gchar * carbone42[] = {
    "colortable carbone42",
    "	0.469	0.020	0.640",
    "	0.403	0.227	0.559",
    "	0.164	0.055	0.582",
    "	0.227	0.055	0.672",
    "	0.289	0.055	0.766",
    "	0.352	0.141	0.898",
    "	0.414	0.375	0.996",
    "	0.445	0.559	0.996",
    "	0.281	0.590	0.602",
    "	0.188	0.523	0.371",
    "	0.004	0.445	0.000",
    "	0.000	0.492	0.000",
    "	0.000	0.539	0.000",
    "	0.059	0.586	0.059",
    "	0.176	0.633	0.176",
    "	0.289	0.680	0.289",
    "	0.402	0.723	0.402",
    "	0.520	0.770	0.520",
    "	0.633	0.816	0.633",
    "	0.750	0.863	0.750",
    "	0.816	0.894	0.816",
    "	0.926	0.894	0.691",
    "	0.938	0.859	0.352",
    "	0.938	0.812	0.000",
    "	0.938	0.766	0.023",
    "	0.938	0.719	0.055",
    "	0.926	0.672	0.086",
    "	0.871	0.625	0.117",
    "	0.816	0.578	0.148",
    "	0.758	0.531	0.180",
    "	0.703	0.484	0.211",
    "	0.648	0.438	0.242",
    "	0.590	0.391	0.250",
    "	0.535	0.344	0.250",
    "	0.485	0.328	0.297",
    "	0.629	0.312	0.375",
    "	0.625	0.003	0.000",
    "	0.718	0.086	0.188",
    "	0.813	0.148	0.273",
    "	0.879	0.211	0.355",
    "	0.949	0.273	0.355",
    "	1.000	0.012	0.000",
  };

  nn = sizeof(carbone42)/sizeof(char *);
  _addTable(carbone42, nn);

  const gchar * chasespectral[] = {
    "colortable chasespectral",
    " 0.002 0.000 0.012",
    " 0.037 0.028 0.054",
    " 0.067 0.055 0.088",
    " 0.088 0.075 0.116",
    " 0.105 0.091 0.145",
    " 0.124 0.107 0.176",
    " 0.142 0.122 0.207",
    " 0.161 0.138 0.238",
    " 0.180 0.154 0.271",
    " 0.200 0.170 0.304",
    " 0.219 0.186 0.338",
    " 0.239 0.203 0.372",
    " 0.259 0.220 0.407",
    " 0.280 0.237 0.442",
    " 0.300 0.254 0.478",
    " 0.321 0.272 0.514",
    " 0.342 0.289 0.551",
    " 0.363 0.307 0.589",
    " 0.384 0.325 0.626",
    " 0.402 0.345 0.661",
    " 0.407 0.371 0.691",
    " 0.392 0.405 0.712",
    " 0.359 0.443 0.728",
    " 0.318 0.480 0.740",
    " 0.278 0.516 0.747",
    " 0.252 0.549 0.743",
    " 0.252 0.582 0.722",
    " 0.270 0.612 0.691",
    " 0.294 0.642 0.658",
    " 0.320 0.671 0.626",
    " 0.355 0.698 0.602",
    " 0.402 0.722 0.591",
    " 0.455 0.743 0.587",
    " 0.509 0.764 0.586",
    " 0.561 0.785 0.584",
    " 0.613 0.805 0.580",
    " 0.663 0.826 0.574",
    " 0.711 0.847 0.567",
    " 0.759 0.868 0.559",
    " 0.805 0.888 0.557",
    " 0.847 0.909 0.569",
    " 0.884 0.930 0.599",
    " 0.919 0.952 0.639",
    " 0.952 0.973 0.682",
    " 0.988 0.995 0.721",
    " 0.990 0.981 0.714",
    " 0.977 0.947 0.674",
    " 0.966 0.913 0.626",
    " 0.956 0.879 0.577",
    " 0.946 0.845 0.529",
    " 0.940 0.809 0.486",
    " 0.936 0.771 0.450",
    " 0.935 0.732 0.416",
    " 0.934 0.692 0.383",
    " 0.932 0.651 0.352",
    " 0.931 0.609 0.325",
    " 0.930 0.565 0.305",
    " 0.929 0.520 0.286",
    " 0.926 0.473 0.267",
    " 0.920 0.426 0.252",
    " 0.906 0.383 0.246",
    " 0.884 0.343 0.251",
    " 0.860 0.304 0.260",
    " 0.834 0.265 0.268",
    " 0.807 0.225 0.274",
    " 0.778 0.186 0.278",
    " 0.746 0.147 0.277",
    " 0.712 0.108 0.275",
    " 0.675 0.070 0.273",
    " 0.635 0.031 0.281",
    " 0.610 0.017 0.313",
    " 0.655 0.092 0.387",
    " 0.711 0.129 0.443",
    " 0.769 0.163 0.493",
    " 0.818 0.213 0.543",
    " 0.851 0.281 0.592",
    " 0.869 0.356 0.635",
    " 0.881 0.430 0.674",
    " 0.888 0.499 0.714",
    " 0.885 0.569 0.768",
    " 0.846 0.615 0.821",
    " 0.741 0.563 0.785",
    " 0.676 0.495 0.740",
    " 0.629 0.421 0.693",
    " 0.586 0.345 0.644",
    " 0.539 0.270 0.592",
    " 0.483 0.201 0.532",
    " 0.418 0.142 0.465",
    " 0.350 0.085 0.396",
    " 0.285 0.021 0.330",
    "endtable"
  };

  nn = sizeof(chasespectral)/sizeof(char *);
  _addTable(chasespectral, nn);

  const gchar * balance[] = {
    " colortable balance",
    " 0.093 0.111 0.262",
    " 0.101 0.122 0.285",
    " 0.109 0.133 0.309",
    " 0.117 0.144 0.333",
    " 0.124 0.154 0.358",
    " 0.131 0.165 0.384",
    " 0.138 0.175 0.410",
    " 0.144 0.185 0.437",
    " 0.149 0.195 0.464",
    " 0.154 0.205 0.491",
    " 0.157 0.216 0.519",
    " 0.160 0.226 0.548",
    " 0.161 0.237 0.576",
    " 0.161 0.247 0.605",
    " 0.159 0.259 0.634",
    " 0.154 0.270 0.663",
    " 0.145 0.283 0.689",
    " 0.130 0.298 0.713",
    " 0.110 0.314 0.730",
    " 0.086 0.331 0.741",
    " 0.063 0.350 0.745",
    " 0.045 0.367 0.745",
    " 0.038 0.384 0.744",
    " 0.043 0.401 0.742",
    " 0.057 0.417 0.740",
    " 0.076 0.433 0.737",
    " 0.096 0.448 0.735",
    " 0.117 0.462 0.733",
    " 0.138 0.477 0.731",
    " 0.159 0.491 0.730",
    " 0.180 0.505 0.729",
    " 0.200 0.519 0.728",
    " 0.221 0.532 0.728",
    " 0.242 0.546 0.728",
    " 0.262 0.559 0.729",
    " 0.284 0.572 0.729",
    " 0.305 0.585 0.730",
    " 0.327 0.598 0.731",
    " 0.349 0.611 0.732",
    " 0.372 0.623 0.734",
    " 0.396 0.635 0.736",
    " 0.420 0.647 0.739",
    " 0.445 0.659 0.742",
    " 0.470 0.671 0.745",
    " 0.495 0.682 0.750",
    " 0.520 0.693 0.754",
    " 0.545 0.705 0.760",
    " 0.570 0.716 0.766",
    " 0.594 0.728 0.773",
    " 0.619 0.739 0.780",
    " 0.643 0.751 0.787",
    " 0.666 0.762 0.795",
    " 0.690 0.774 0.804",
    " 0.713 0.786 0.813",
    " 0.736 0.799 0.822",
    " 0.759 0.811 0.831",
    " 0.781 0.824 0.841",
    " 0.804 0.837 0.851",
    " 0.826 0.850 0.862",
    " 0.848 0.863 0.872",
    " 0.870 0.877 0.883",
    " 0.892 0.891 0.895",
    " 0.913 0.905 0.906",
    " 0.934 0.920 0.918",
    " 0.945 0.927 0.923",
    " 0.936 0.908 0.902",
    " 0.928 0.890 0.880",
    " 0.920 0.871 0.858",
    " 0.913 0.852 0.836",
    " 0.906 0.834 0.813",
    " 0.900 0.815 0.791",
    " 0.893 0.797 0.768",
    " 0.887 0.778 0.745",
    " 0.881 0.760 0.723",
    " 0.876 0.742 0.700",
    " 0.870 0.724 0.677",
    " 0.864 0.706 0.654",
    " 0.859 0.688 0.632",
    " 0.853 0.670 0.609",
    " 0.848 0.652 0.586",
    " 0.843 0.634 0.564",
    " 0.837 0.616 0.541",
    " 0.832 0.598 0.519",
    " 0.827 0.580 0.496",
    " 0.821 0.563 0.474",
    " 0.816 0.545 0.452",
    " 0.810 0.527 0.430",
    " 0.805 0.509 0.408",
    " 0.799 0.491 0.387",
    " 0.793 0.473 0.366",
    " 0.788 0.454 0.345",
    " 0.782 0.436 0.324",
    " 0.776 0.418 0.303",
    " 0.770 0.399 0.284",
    " 0.763 0.380 0.264",
    " 0.757 0.361 0.245",
    " 0.750 0.342 0.228",
    " 0.743 0.322 0.211",
    " 0.736 0.303 0.195",
    " 0.728 0.282 0.180",
    " 0.721 0.262 0.168",
    " 0.712 0.241 0.157",
    " 0.703 0.220 0.150",
    " 0.692 0.199 0.144",
    " 0.681 0.179 0.142",
    " 0.669 0.159 0.141",
    " 0.655 0.140 0.143",
    " 0.641 0.123 0.145",
    " 0.625 0.106 0.148",
    " 0.609 0.091 0.152",
    " 0.591 0.079 0.155",
    " 0.573 0.069 0.158",
    " 0.554 0.061 0.161",
    " 0.534 0.057 0.162",
    " 0.513 0.055 0.162",
    " 0.492 0.055 0.161",
    " 0.471 0.055 0.158",
    " 0.450 0.056 0.154",
    " 0.429 0.057 0.150",
    " 0.408 0.057 0.144",
    " 0.388 0.057 0.137",
    " 0.367 0.056 0.130",
    " 0.346 0.054 0.122",
    " 0.326 0.052 0.113",
    " 0.306 0.049 0.104",
    " 0.286 0.046 0.095",
    " 0.266 0.042 0.085",
    " 0.246 0.038 0.075",
    "endtable"
  };

  nn = sizeof(balance)/sizeof(char *);
  _addTable(balance, nn);

  const gchar * cubehelixr[] = {
    "colortable cubehelixr",
    " 0.772 0.873 0.947",
    " 0.759 0.827 0.954",
    " 0.761 0.776 0.953",
    " 0.776 0.714 0.935",
    " 0.796 0.659 0.900",
    " 0.816 0.608 0.847",
    " 0.831 0.558 0.766",
    " 0.832 0.522 0.678",
    " 0.813 0.495 0.571",
    " 0.778 0.480 0.475",
    " 0.721 0.474 0.383",
    " 0.640 0.475 0.297",
    " 0.556 0.478 0.239",
    " 0.462 0.481 0.201",
    " 0.360 0.479 0.184",
    " 0.267 0.468 0.191",
    " 0.204 0.451 0.209",
    " 0.142 0.420 0.240",
    " 0.103 0.376 0.273",
    " 0.087 0.335 0.294",
    " 0.082 0.278 0.307",
    " 0.089 0.219 0.301",
    " 0.097 0.173 0.281",
    " 0.104 0.121 0.238",
    " 0.101 0.080 0.185",
    "endtable"
  };

  nn = sizeof(cubehelixr)/sizeof(char *);
  _addTable(cubehelixr, nn);

}